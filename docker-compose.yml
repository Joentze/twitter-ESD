# Docker compose file to run the following:
# - rabbitmq
# - minio
# - react frontend
# - database (mysql/postgres) (https://onexlab-io.medium.com/docker-compose-mysql-database-seed-3bcbdfc51e8b)
# - redis cache?
# - atomic microservices
# - complex microservices

version: "3"
services:
  mysql:
    container_name: esd_database
    build: ./backend/database
    ports:
      - 3308:3306
    env_file:
      - .env
    networks:
      - mynet

  users_service:
    # remove container name for load balancing
    container_name: users_service
    build:
      context: ./backend/apis/atomic/
      dockerfile: ./users/Dockerfile
    # remove port mapping for load balancing
    ports:
      - 5100:5100
    env_file:
      - .env
    networks:
      - mynet
    depends_on:
      - mysql

  posts_service:
    container_name: posts_service
    build:
      context: ./backend/apis/atomic/
      dockerfile: ./posts/Dockerfile
    ports:
      - 5101:5101
    env_file:
      - .env
    networks:
      - mynet
    depends_on:
      - mysql

  comments_service:
    container_name: comments_service
    build:
      context: ./backend/apis/atomic/
      dockerfile: ./comments/Dockerfile
    ports:
      - 5102:5102
    env_file:
      - .env
    networks:
      - mynet
    depends_on:
      - mysql

  likes_service:
    container_name: likes_service
    build:
      context: ./backend/apis/atomic/
      dockerfile: ./likes/Dockerfile
    ports:
      - 5103:5103
    env_file:
      - .env
    networks:
      - mynet
    depends_on:
      - mysql

  follows_service:
    container_name: follows_service
    build:
      context: ./backend/apis/atomic/
      dockerfile: ./follows/Dockerfile
    ports:
      - 5104:5104
    env_file:
      - .env
    networks:
      - mynet
    depends_on:
      - mysql

  assets_service:
    container_name: assets_service
    build:
      context: ./backend/apis/atomic/
      dockerfile: ./asset/Dockerfile
    ports:
      - 5105:5105
    env_file:
      - .env
    networks:
      - mynet
    depends_on:
      - minio

  images_service:
    container_name: images_service
    build:
      context: ./backend/apis/atomic/
      dockerfile: ./images/Dockerfile
    ports:
      - 5110:5110
    env_file:
      - .env
    networks:
      - mynet
    depends_on:
      - mysql

  post_images_service:
    container_name: post_images_service
    build:
      context: ./backend/apis/atomic/
      dockerfile: ./post_images/Dockerfile
    ports:
      - 5111:5111
    env_file:
      - .env
    networks:
      - mynet
    depends_on:
      - mysql

  read_posts_service:
    container_name: read_posts_service
    build:
      context: ./backend/apis/complex/
      dockerfile: ./read_posts/Dockerfile
    ports:
      - 5120:5120
    env_file:
      - .env
    networks:
      - mynet
    depends_on:
      - follows_service
      - posts_service

  minio:
    image: quay.io/minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env
    volumes:
      - ./backend/bucket/minio/data:/data
    command: server /data --console-address ":9001"

  # auth0:
  #   container_name: auth0-login
  #   build: ./backend/apis/auth
  #   ports:
  #     - 3000:3000
  #   env_file:
  #     - .env

  kong:
    container_name: kong_dbless
    build: ./backend/apis/kong/
    networks:
      - mynet
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8444:8444" # Admin API. Listens for calls from the command line over HTTPS.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
      - "8445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
      - "8003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8004:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
      - "8447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kong:8000"]
      interval: 5s
      timeout: 2s
      retries: 15

networks:
  mynet:
    driver: bridge
