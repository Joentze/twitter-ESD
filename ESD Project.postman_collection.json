{
	"info": {
		"_postman_id": "50d282e9-4005-4a6d-8674-8b23ae02f212",
		"name": "ESD Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27676725"
	},
	"item": [
		{
			"name": "Kong Tests",
			"item": [
				{
					"name": "Follows",
					"item": [
						{
							"name": "Create Follow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"followed_id\": \"user4_uid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/follow/user1_uid",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"follow",
										"user1_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Following",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/follow/user4_uid",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"follow",
										"user4_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Follows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/follow/all",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"follow",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Follow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"followed_id\": \"user1_uid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/follow/user2_uid",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"follow",
										"user2_uid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user5\",\n    \"email\": \"user5@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/user/user5_uid",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"user",
										"user5_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "update user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user5 updated\",\n    // \"email\": \"user5@user5.com\",\n    \"is_private\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/user/user5_uid",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"user",
										"user5_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "user by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/user/user5_uid",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"user",
										"user5_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/user/all",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"user",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/user/user5_uid",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"user",
										"user5_uid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Comments",
					"item": [
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"This is a new comment\",\n    \"commenter_uid\": \"user4_uid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/comment/post1_id",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"comment",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment w Validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"This is a new comment\",\n    \"commenter_uid\": \"user4_uid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/comment/upload/post1_id",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"comment",
										"upload",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Comment by User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/comment/user_get/user4_uid",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"comment",
										"user_get",
										"user4_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Comment by Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/comment/post3_id",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"comment",
										"post3_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/comment/all",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"comment",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"comment_id\": \"comment3_id\",\n    \"content\": \"content updated\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/comment/post1_id",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"comment",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"comment_id\": \"comment1_id\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/post/post3_id",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"post",
										"post3_id"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Likes",
					"item": [
						{
							"name": "Create Like",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uid\": \"user4_uid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/like/post1_id",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"like",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Likes by User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/like/user_get/user4_uid",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"like",
										"user_get",
										"user4_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Likes by Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/api/v1/like/post3_id",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"api",
										"v1",
										"like",
										"post3_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Likes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/api/v1/like/all",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"api",
										"v1",
										"like",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Like",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uid\": \"user4_uid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/like/post1_id",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"like",
										"post1_id"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Read Posts",
					"item": [
						{
							"name": "Read Posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "uid",
										"value": "user1_uid",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{KONG_URL}}/read_posts",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"read_posts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Posts",
					"item": [
						{
							"name": "Create Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_content\": \"This is a new post\",\n    \"post_location\": \"California\",\n    \"post_images\": [\n                    \"image1.jpg\",\n                    \"image2.jpg\"\n                ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/post/user4_uid",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"post",
										"user4_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post w Validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_content\": \"This is a post\",\n    \"post_location\": \"California\",\n    \"post_images\": [\n                    \"image1.jpg\",\n                    \"image2.jpg\"\n                ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/post/upload/user4_uid",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"post",
										"upload",
										"user4_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Post by User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/post/user_get/user4_uid",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"post",
										"user_get",
										"user4_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Post by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/post/post1_id",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"post",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{KONG_URL}}/post/all",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"post",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_content\": \"This is post has been updated!\",\n    \"post_location\": \"Sri Lanka\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/post/post1_id",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"post",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{KONG_URL}}/post/post1_id",
									"host": [
										"{{KONG_URL}}"
									],
									"path": [
										"post",
										"post1_id"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "MinIO",
					"item": []
				}
			]
		},
		{
			"name": "Internal URLs",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Get all Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - 'code' and 'data'\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.exist;",
											"    pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Code is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.code).to.be.a('number');",
											"  pm.expect(responseData.code).to.satisfy((code) => code >= 0, \"Code should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Data is an object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"The 'users' array is present and contains at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data.users).to.exist.and.to.be.an('array');",
											"    pm.expect(responseData.data.users).to.have.lengthOf.at.least(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5100/users",
									"host": [
										"localhost"
									],
									"port": "5100",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the value of 'is user private'\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData['is user private']).to.be.oneOf([0, 1]);",
											"});",
											"",
											"",
											"pm.test(\"Validate 'user created on' is a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData[\"user created on\"]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"});",
											"",
											"",
											"pm.test(\"User email is in a valid email format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData[\"user email\"]).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Invalid email format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5100/user/user1_uid",
									"host": [
										"localhost"
									],
									"port": "5100",
									"path": [
										"user",
										"user1_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - code and data\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.exist;",
											"    pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"User ID is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData[\"user id\"]).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"User ID should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"User email is in a valid email format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData[\"user email\"]).to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, \"Email format is not valid\");",
											"});",
											"",
											"",
											"pm.test(\"User created on date is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData['data']['user created on']).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user5\",\n    \"email\": \"user5@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5100/user/user5_uid",
									"host": [
										"localhost"
									],
									"port": "5100",
									"path": [
										"user",
										"user5_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the correct Content-Type header\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response body contains expected fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.all.keys('code', 'data');",
											"});",
											"",
											"",
											"pm.test(\"The 'code' field has a valid value\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.code).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Test that 'data' field contains the expected sub-fields\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"  pm.expect(responseData.data).to.include.all.keys(\"is user private\", \"user created on\", \"user email\", \"user id\", \"username\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user2 updated\",\n    // \"email\": \"user2@user2.com\",\n    \"is_private\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5100/user/user2_uid",
									"host": [
										"localhost"
									],
									"port": "5100",
									"path": [
										"user",
										"user2_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5100/user/user2_uid",
									"host": [
										"localhost"
									],
									"port": "5100",
									"path": [
										"user",
										"user2_uid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Posts",
					"item": [
						{
							"name": "Get all Posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - code and data\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('code');",
											"  pm.expect(responseData).to.have.property('data');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5101/posts",
									"host": [
										"localhost"
									],
									"port": "5101",
									"path": [
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Post by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Date posted is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist;",
											"    pm.expect(responseData.data[\"date posted\"]).to.exist;",
											"    pm.expect(responseData.data[\"date posted\"]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"});",
											"",
											"",
											"pm.test(\"Post content is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.data).to.be.an('object');",
											"  pm.expect(responseData.data['post content']).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5101/post/post1_id",
									"host": [
										"localhost"
									],
									"port": "5101",
									"path": [
										"post",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Post by User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData[\"date posted\"]).to.exist;",
											"  pm.expect(responseData[\"post content\"]).to.exist;",
											"  pm.expect(responseData[\"post id\"]).to.exist;",
											"  pm.expect(responseData[\"post images\"]).to.exist;",
											"  pm.expect(responseData[\"post location\"]).to.exist;",
											"  pm.expect(responseData[\"poster id\"]).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Date posted is in a valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.be.an('array');",
											"  ",
											"  responseData.data.forEach(function(post) {",
											"    pm.expect(post).to.have.property('date posted').that.is.a('string').and.matches(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Post images array is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData[\"post images\"]).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Post images array should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5101/userPosts/user1_uid",
									"host": [
										"localhost"
									],
									"port": "5101",
									"path": [
										"userPosts",
										"user1_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"  pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData['date posted']).to.exist;",
											"    pm.expect(responseData['post content']).to.exist;",
											"    pm.expect(responseData['post id']).to.exist;",
											"    pm.expect(responseData['post images']).to.exist;",
											"    pm.expect(responseData['post location']).to.exist;",
											"    pm.expect(responseData['poster id']).to.exist;",
											"  });",
											"",
											"",
											"pm.test(\"Date posted is in a valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"  pm.expect(responseData.data['date posted']).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"});",
											"",
											"",
											"pm.test(\"Poster id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.poster_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Post images is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.post_images).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_content\": \"This is a new post\",\n    \"post_location\": \"California\",\n    \"post_images\": [\n                    \"image1.jpg\",\n                    \"image2.jpg\"\n                ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5101/post/user4_uid",
									"host": [
										"localhost"
									],
									"port": "5101",
									"path": [
										"post",
										"user4_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post w Validation",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_content\": \"This is a new post\",\n    \"post_location\": \"California\",\n    \"post_images\": [\n                    \"image1.jpg\",\n                    \"image2.jpg\"\n                ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5122/upload/user4_uid",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5122",
									"path": [
										"upload",
										"user4_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"The 'code' field is present in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.code).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Check if the 'data' field is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Validate that the 'date posted' is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData[\"data\"][\"date posted\"]).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_content\": \"This is post has been updated!\",\n    \"post_location\": \"Sri Lanka\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5101/post/post1_id",
									"host": [
										"localhost"
									],
									"port": "5101",
									"path": [
										"post",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Post",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5101/posts/post2_id",
									"host": [
										"localhost"
									],
									"port": "5101",
									"path": [
										"posts",
										"post2_id"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Comments",
					"item": [
						{
							"name": "Get all Comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'code' field is present and has a value of 0\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.exist.and.to.equal(0);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'data' field is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'comments' array is present and not empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.data.comments).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5102/comments",
									"host": [
										"localhost"
									],
									"port": "5102",
									"path": [
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Comments by User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to application/json\", function () {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"",
											"pm.test(\"Comment ID is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    responseData.data.forEach(function(comment) {",
											"        pm.expect(comment.comment_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Comment ID should not be empty\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Commenter UID is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"  ",
											"  responseData.data.forEach(function(comment) {",
											"    pm.expect(comment.commenter_uid).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Commenter UID should not be empty\");",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5102/userComments/user1_uid",
									"host": [
										"localhost"
									],
									"port": "5102",
									"path": [
										"userComments",
										"user1_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Comments on Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Comment id is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    responseData.data.forEach(function(comment) {",
											"        pm.expect(comment).to.have.property('comment id').that.is.a('string').and.not.empty;",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Commenter uid is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Data array should not be empty\");",
											"",
											"  responseData.data.forEach(function(comment) {",
											"    pm.expect(comment.commenter_uid).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Commenter uid should be a non-empty string\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Date commented is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    responseData.data.forEach(function(comment) {",
											"        pm.expect(comment[\"date commented\"]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5102/comment/post1_id",
									"host": [
										"localhost"
									],
									"port": "5102",
									"path": [
										"comment",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('comment id');",
											"    pm.expect(responseData).to.have.property('commenter uid');",
											"    pm.expect(responseData).to.have.property('content');",
											"    pm.expect(responseData).to.have.property('date commented');",
											"    pm.expect(responseData).to.have.property('post id');",
											"});",
											"",
											"",
											"pm.test(\"Comment id is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data.comment_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Commenter uid is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data.commenter_uid).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.content).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"This is a new comment\",\n    \"commenter_uid\": \"user4_uid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5102/comment/post1_id",
									"host": [
										"localhost"
									],
									"port": "5102",
									"path": [
										"comment",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment w Validation",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"This is a new comment\",\n    \"commenter_uid\": \"user4_uid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5123/upload/post1_id",
									"host": [
										"localhost"
									],
									"port": "5123",
									"path": [
										"upload",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('comment id');",
											"  pm.expect(responseData).to.have.property('commenter uid');",
											"  pm.expect(responseData).to.have.property('content');",
											"  pm.expect(responseData).to.have.property('date commented');",
											"  pm.expect(responseData).to.have.property('post id');",
											"});",
											"",
											"",
											"pm.test(\"Comment id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data.comment_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Comment id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Commenter uid is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data.commenter_uid).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.content).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Content should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"comment_id\": \"comment3_id\",\n    \"content\": \"content updated\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5102/comment/post1_id",
									"host": [
										"localhost"
									],
									"port": "5102",
									"path": [
										"comment",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Comment",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"comment_id\": \"comment1_id\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5102/comment/post3_id",
									"host": [
										"localhost"
									],
									"port": "5102",
									"path": [
										"comment",
										"post3_id"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Likes",
					"item": [
						{
							"name": "Get all Likes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.code).to.exist;",
											"  pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'follows' array is present in the response and contains at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.follows).to.exist.and.to.be.an('array');",
											"    pm.expect(responseData.follows).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5104/follows",
									"host": [
										"localhost"
									],
									"port": "5104",
									"path": [
										"follows"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Likes by User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - code and data\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('code');",
											"    pm.expect(responseData).to.have.property('data');",
											"});",
											"",
											"",
											"pm.test(\"Data should be an array\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Data array is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.an('array').to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Data array contains only strings\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item).to.be.a('string');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5103/userLikes/user1_uid",
									"host": [
										"localhost"
									],
									"port": "5103",
									"path": [
										"userLikes",
										"user1_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Post Likes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - code and data\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.exist;",
											"    pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Data is an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Data array is not empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											"",
											"pm.test(\"Data array contains at least one element\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.an('array').that.has.lengthOf.at.least(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5104/follow/user1_uid",
									"host": [
										"localhost"
									],
									"port": "5104",
									"path": [
										"follow",
										"user1_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Like",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - code and data\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.code).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"The code field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.code).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.code).to.be.at.least(0, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Data field is an object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Date liked is in a valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.exist;",
											"  pm.expect(responseData.data[\"date liked\"]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uid\": \"user4_uid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5103/like/post1_id",
									"host": [
										"localhost"
									],
									"port": "5103",
									"path": [
										"like",
										"post1_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Like",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uid\": \"user4_uid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5103/like/post1_id",
									"host": [
										"localhost"
									],
									"port": "5103",
									"path": [
										"like",
										"post1_id"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Follows",
					"item": [
						{
							"name": "Get all Follows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.code).to.exist;",
											"  pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Validate that the 'follows' array is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data.follows).to.exist.and.to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5104/follows",
									"host": [
										"localhost"
									],
									"port": "5104",
									"path": [
										"follows"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Following",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - code and data\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.code).to.exist;",
											"  pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'data' array is present and not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
											"});",
											"",
											"",
											"pm.test(\"Validate that the code is equal to 0\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.code).to.equal(0);",
											"});",
											"",
											"",
											"pm.test(\"Response Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5104/follow/user1_uid",
									"host": [
										"localhost"
									],
									"port": "5104",
									"path": [
										"follow",
										"user1_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Follow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Validate the response body structure - code and data fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.code).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'date followed' field is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData['date followed']).to.exist;",
											"});",
											"",
											"pm.test(\"Verify that 'followed id' field is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData['followed id']).to.exist;",
											"});",
											"",
											"pm.test(\"Date followed is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data.date_followed).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the followed id and follower id fields are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data.followed_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"    pm.expect(responseData.data.follower_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"followed_id\": \"user4_uid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5104/follow/user1_uid",
									"host": [
										"localhost"
									],
									"port": "5104",
									"path": [
										"follow",
										"user1_uid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Follow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"followed_id\": \"user3_uid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:5104/follow/user1_uid",
									"host": [
										"localhost"
									],
									"port": "5104",
									"path": [
										"follow",
										"user1_uid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Minio",
					"item": [
						{
							"name": "New Request",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true,
									"accept-encoding": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/Users/basil/Desktop/Screenshot 2024-03-01 at 14.48.39.png"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5105/upload",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5105",
									"path": [
										"upload"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Read Posts",
					"item": [
						{
							"name": "Read Posts",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "uid",
										"value": "user1_uid",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:5120/read_posts",
									"host": [
										"localhost"
									],
									"port": "5120",
									"path": [
										"read_posts"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "KONG_URL",
			"value": "localhost:8000/api/v1"
		}
	]
}